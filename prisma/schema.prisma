generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Hod {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  gender     String
  address    String?
  portfolio  String
  pictureUrl String
  bio        String?
  department String?
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Student    Student[]
}

model TgIncharge {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  pictureUrl String
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Tg {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  phoneNo    String
  pictureUrl String?
  gender     String
  department String
  bio        String?
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Student    Student[]
  Tasks      Tasks[]
}

model Teacher {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  phoneNo    String
  pictureUrl String
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model FamilyDetails {
  id                String   @id @default(cuid())
  email             String?
  passHash          String
  fathersName       String?
  mothersName       String?
  fathersPhoneNo    String?
  mothersPhoneNo    String?
  fathersOccupation String?
  mothersOccupation String?
  noOfSiblings      Int?
  brothersName      String?
  sistersName       String?
  brothersPhoneNo   String?
  sistersPhoneNo    String?
  familyIncome      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Student           Student?
}

model MedicalHistory {
  id          String   @id @default(cuid())
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Student     Student  @relation(fields: [rollNo], references: [rollNo])
  rollNo      String   @unique
}

model Student {
  rollNo                 String          @id
  name                   String
  pictureUrl             String?
  email                  String          @unique
  passHash               String
  phoneNo                String
  gender                 String?
  age                    Int?
  dateOfBirth            String?
  department             String?
  address                String?
  cast                   String?
  religion               String?
  seatType               String?
  admissionDate          String?
  achivement             String?         @db.VarChar(200)
  achivement_description String?         @db.LongText
  year                   Int?
  section                String?
  bloodGroup             String?
  height                 String?
  weight                 String?
  addharNumber           String?
  tenthCollege           String?
  tenthYOP               String?
  tenthScore             Float?
  twelthCollege          String?
  twelthYOP              String?
  twelthScore            Float?
  jeeScore               Float?
  cetScore               Float?
  sem1Score              Float?
  sem2Score              Float?
  sem3Score              Float?
  sem4Score              Float?
  sem5Score              Float?
  sem6Score              Float?
  sem7Score              Float?
  sem8Score              Float?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  role                   UserRole?
  hod                    Hod?            @relation(fields: [hodId], references: [id])
  hodId                  String?         @map("hod_id")
  Tg                     Tg?             @relation(fields: [tgId], references: [id])
  tgId                   String?         @map("tg_id")
  familyDetails          FamilyDetails?  @relation(fields: [familyDetailsId], references: [id])
  familyDetailsId        String?         @unique
  Friends                Friends?        @relation(fields: [friendsId], references: [id])
  friendsId              String?
  Goals                  Goals[]
  Tasks                  Tasks[]
  Attendances            Attendances[]
  Assesments             Assesments[]
  MedicalHistory         MedicalHistory?
}

model Friends {
  id            String    @id @default(cuid())
  collegeFriend Student[]
}

model Attendances {
  id       String          @id @default(cuid())
  lecture1 AttendanceType?
  lecture2 AttendanceType?
  lecture3 AttendanceType?
  lecture4 AttendanceType?
  lecture5 AttendanceType?
  lecture6 AttendanceType?
  total    Int?
  student  Student?        @relation(fields: [rollNo], references: [rollNo])
  rollNo   String?         @unique
}

model Assesments {
  id        String        @id @default(cuid())
  name      AssesmentType
  subject1  Subjects?
  subject2  Subjects?
  subject3  Subjects?
  subject4  Subjects?
  subject5  Subjects?
  score1    Int
  score2    Int
  score3    Int
  score4    Int
  score5    Int
  updatedAt DateTime      @updatedAt
  Student   Student?      @relation(fields: [rollNo], references: [rollNo])
  rollNo    String?
}

model Tasks {
  id           String   @id @default(cuid())
  title        String
  description  String
  deadlineDate String
  deadlineTime String
  TG           Tg?      @relation(fields: [createdBy], references: [id])
  createdBy    String?
  taskStatus   Status
  createdAt    DateTime @default(now())
  Student      Student? @relation(fields: [rollNo], references: [rollNo])
  rollNo       String?
}

model Goals {
  id          String   @id @default(cuid())
  title       String
  description String
  deadline    String
  type        GoalType
  Student     Student? @relation(fields: [rollNo], references: [rollNo])
  rollNo      String?
}

enum UserRole {
  HOD
  INCHARGE
  TG
  TEACHER
  PARENT
  STUDENT
}

enum AttendanceType {
  PRESENT
  ABSENT
  INFORMED
}

enum Subjects {
  AI
  CN
  SEPM
  DP
  FE
}

enum AssesmentType {
  CAE1
  CAE2
  TAE1
  TAE2
  TAE3
  TAE4
}

enum Status {
  InProgress
  Done
}

enum GoalType {
  LongTerm
  ShortTerm
}
